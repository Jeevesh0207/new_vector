File: ./frontend/src/main.jsx
--------------------------------------------------------------------------------
```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { ReactFlowProvider } from 'reactflow';

createRoot(document.getElementById('root')).render(
  <StrictMode>
   <ReactFlowProvider>
   <App />
   </ReactFlowProvider>
  </StrictMode>
);
```

================================================================================

File: ./frontend/src/App.jsx
--------------------------------------------------------------------------------
```
import { PipelineToolbar } from './components/toolbar';
import { PipelineUI } from './components/ui';
import { SubmitButton } from './components/submit-button';

function App() {
  return (
    <div className="flex flex-col h-screen bg-gray-50">
      <PipelineToolbar />
      <div className="flex-1">
        <PipelineUI />
      </div>
      <SubmitButton />
    </div>
  );
}

export default App;
```

================================================================================

File: ./frontend/src/components/node-base.jsx
--------------------------------------------------------------------------------
```
import React, { memo } from 'react';
import { Handle, Position } from 'reactflow';
import { cn } from '../lib/utils';
import { useStore } from '../lib/store';
import { theme } from '../lib/theme';

export const BaseNode = memo(({
  id,
  data,
  type,
  handles = [],
  children,
  className,
  onDataChange,
}) => {
  const toggleNodeSelection = useStore((state) => state.toggleNodeSelection);
  const selectedNodes = useStore((state) => state.selectedNodes);
  const isSelected = selectedNodes.includes(id);

  const handleClick = (e) => {
    e.stopPropagation();
    toggleNodeSelection(id);
  };

  return (
    <div
      className={cn(
        "rounded-lg p-4 min-w-[200px] transition-all duration-200",
        theme.shadows.node,
        isSelected ? "ring-2 ring-blue-500 ring-offset-2" : "ring-1 ring-gray-200",
        className
      )}
      onClick={handleClick}
    >
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-sm font-semibold text-gray-700">{type}</h3>
      </div>

      {children}

      {handles.map((handle) => (
        <Handle
          key={handle.id}
          type={handle.type}
          position={handle.position}
          id={`${id}-${handle.id}`}
          className="w-3 h-3 rounded-full border-2 border-white bg-gray-600 transition-colors hover:bg-blue-500"
          style={handle.style}
        />
      ))}
    </div>
  );
});```

================================================================================

File: ./frontend/src/components/draggable-node.jsx
--------------------------------------------------------------------------------
```
import React from "react";
import { cn } from "../lib/utils";

export const DraggableNode = ({
  type,
  label,
  icon: Icon,
  color,
  customData = {},
}) => {
  const onDragStart = (event) => {
    const appData = { nodeType: type, label, component: customData };
    event.dataTransfer.setData(
      "application/reactflow",
      JSON.stringify(appData)
    );
    event.dataTransfer.effectAllowed = "move";
  };

  return (
    <div
      className={cn(
        "flex items-center gap-2 px-4 py-2 text-white rounded-lg cursor-grab transition-transform hover:scale-105",
        "shadow-sm hover:shadow-md",
        color
      )}
      onDragStart={onDragStart}
      draggable
    >
      <Icon size={18} />
      <span className="text-sm font-medium">{label}</span>
    </div>
  );
};
```

================================================================================

File: ./frontend/src/components/ui.jsx
--------------------------------------------------------------------------------
```
import { useState, useRef, useCallback, useMemo } from 'react';
import ReactFlow, { 
  Controls, 
  Background, 
  MiniMap,
  Panel,
  useReactFlow,
} from 'reactflow';
import { useStore } from '../lib/store';
import { shallow } from 'zustand/shallow';
import { InputNode } from './nodes/input-node';
import { LLMNode } from './nodes/llm-node';
import { OutputNode } from './nodes/output-node';
import { TextNode } from './nodes/text-node';
import { TransformNode } from './nodes/transform-node';
import { CalculationNode } from './nodes/calculation-node';
import { DecisionNode } from './nodes/decision-node';
import SavedComponentNode from './saved/SavedComponentNode';
import { ZoomIn, ZoomOut, Maximize } from 'lucide-react';

import 'reactflow/dist/style.css';

const nodeTypes = {
  customInput: InputNode,
  llm: LLMNode,
  customOutput: OutputNode,
  text: TextNode,
  transform: TransformNode,
  calculation: CalculationNode,
  decision: DecisionNode,
  savedComponent: SavedComponentNode,
};

const selector = (state) => ({
  nodes: state.nodes,
  edges: state.edges,
  getNodeID: state.getNodeID,
  addNode: state.addNode,
  onNodesChange: state.onNodesChange,
  onEdgesChange: state.onEdgesChange,
  onConnect: state.onConnect,
});

const proOptions = { 
  hideAttribution: true,
  account: 'paid-pro',
};

export const PipelineUI = () => {
  const reactFlowWrapper = useRef(null);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  const { fitView, zoomIn, zoomOut } = useReactFlow();
  
  const {
    nodes,
    edges,
    getNodeID,
    addNode,
    onNodesChange,
    onEdgesChange,
    onConnect,
  } = useStore(selector, shallow);

  
  const memoizedNodeTypes = useMemo(() => nodeTypes, []);

  const onDrop = useCallback(
    (event) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current?.getBoundingClientRect();
      if (!reactFlowBounds || !reactFlowInstance) return;

      const appData = event.dataTransfer.getData('application/reactflow');
      if (!appData) return;

      const { nodeType, label, component } = JSON.parse(appData);
      if (!nodeType) return;

      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const nodeID = getNodeID(nodeType);
      const newNode = {
        id: nodeID,
        type: nodeType,
        position,
        data: { id: nodeID, nodeType, label, component },
      };

      addNode(newNode);
    },
    [reactFlowInstance, getNodeID, addNode]
  );

  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  return (
    <div ref={reactFlowWrapper} className="w-full h-[calc(100vh-10rem)]">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onDrop={onDrop}
        onDragOver={onDragOver}
        onInit={setReactFlowInstance}
        nodeTypes={memoizedNodeTypes}
        proOptions={proOptions}
        minZoom={0.1}
        maxZoom={4}
        defaultEdgeOptions={{
          animated: true,
          style: { stroke: '#64748b', strokeWidth: 2 },
        }}
      >
        <Background color="#94a3b8" gap={16} size={1} />
        <Controls 
          className="bg-white/90 backdrop-blur-sm shadow-lg rounded-lg border border-gray-200"
          position="bottom-right"
        />
        <MiniMap 
          className="bg-white/90 backdrop-blur-sm shadow-lg rounded-lg border border-gray-200"
          nodeColor={(node) => {
            switch (node.type) {
              case 'customInput': return '#3b82f6';
              case 'llm': return '#8b5cf6';
              case 'text': return '#22c55e';
              case 'customOutput': return '#f97316';
              case 'transform': return '#ec4899';
              case 'calculation': return '#eab308';
              case 'decision': return '#8b5cf6';
              default: return '#64748b';
            }
          }}
        />
        <Panel position="top-right" className="flex gap-2">
          <button
            onClick={() => zoomIn()}
            className="p-2 rounded-lg bg-white/90 backdrop-blur-sm shadow-sm hover:bg-gray-50 border border-gray-200"
          >
            <ZoomIn size={20} />
          </button>
          <button
            onClick={() => zoomOut()}
            className="p-2 rounded-lg bg-white/90 backdrop-blur-sm shadow-sm hover:bg-gray-50 border border-gray-200"
          >
            <ZoomOut size={20} />
          </button>
          <button
            onClick={() => fitView()}
            className="p-2 rounded-lg bg-white/90 backdrop-blur-sm shadow-sm hover:bg-gray-50 border border-gray-200"
          >
            <Maximize size={20} />
          </button>
        </Panel>
      </ReactFlow>
    </div>
  );
};```

================================================================================

File: ./frontend/src/components/submit-button.jsx
--------------------------------------------------------------------------------
```
import React from 'react';
import { useStore } from '../lib/store';
import { shallow } from 'zustand/shallow';

const selector = (state) => ({
  nodes: state.nodes,
  edges: state.edges,
});

export const SubmitButton = () => {
  const { nodes, edges } = useStore(selector, shallow);

  const handleSubmit = async () => {
    try {
      const response = await fetch('http://localhost:8000/pipelines/parse', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nodes, edges }),
      });

      const data = await response.json();

      alert(
        `Pipeline Analysis:\n\n` +
        `Number of Nodes: ${data.num_nodes}\n` +
        `Number of Edges: ${data.num_edges}\n` +
        `Is DAG: ${data.is_dag ? 'Yes' : 'No'}`
      );
    } catch (error) {
      alert('Error submitting pipeline: ' + error.message);
    }
  };

  return (
    <div className="fixed bottom-4 w-full  flex justify-center">
      <button
        onClick={handleSubmit}
        className="px-6 py-2 text-white bg-blue-500 rounded-lg shadow-lg hover:bg-blue-600 transition-colors"
      >
        Submit Pipeline
      </button>
    </div>
  );
};
```

================================================================================

File: ./frontend/src/components/save-button.jsx
--------------------------------------------------------------------------------
```
import React, { useState } from 'react';
import { Save } from 'lucide-react';
import { SaveComponentModal } from './saved/SaveComponentModal';
import { useStore } from '../lib/store';
import { shallow } from 'zustand/shallow';

export const SaveButton = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const selectedNodes = useStore(
    (state) => state.nodes.filter(node => node.selected),
    shallow
  );

  const handleSaveClick = () => {
    if (selectedNodes.length > 0) {
      setIsModalOpen(true);
    } else {
      alert('Please select nodes to save as a component');
    }
  };

  return (
    <>
      <button
        onClick={handleSaveClick}
        className="flex items-center gap-2 px-4 py-2 text-white bg-indigo-500 rounded-lg shadow-lg hover:bg-indigo-600 transition-colors"
        title="Save selected nodes as component"
      >
        <Save size={18} />
        <span className="text-sm font-medium">Save Component</span>
        {selectedNodes.length > 0 && (
          <span className="px-2 py-0.5 text-xs bg-white text-indigo-600 rounded-full">
            {selectedNodes.length}
          </span>
        )}
      </button>
      <SaveComponentModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
      />
    </>
  );
};```

================================================================================

File: ./frontend/src/components/toolbar.jsx
--------------------------------------------------------------------------------
```
import React from "react";
import { DraggableNode } from "./draggable-node";
import { SaveButton } from "./save-button";
import { SavedComponents } from "./saved/SavedComponents";
import {
  Brain,
  Type,
  ArrowRightCircle,
  ArrowLeftCircle,
  Wand2,
  Calculator,
  GitBranch,
  Trash2,
} from "lucide-react";
import { useStore } from "../lib/store";

const tools = [
  {
    type: "customInput",
    label: "Input",
    icon: ArrowLeftCircle,
    color: "bg-blue-500",
  },
  { type: "llm", label: "LLM", icon: Brain, color: "bg-purple-500" },
  { type: "text", label: "Text", icon: Type, color: "bg-green-500" },
  {
    type: "customOutput",
    label: "Output",
    icon: ArrowRightCircle,
    color: "bg-orange-500",
  },
  { type: "transform", label: "Transform", icon: Wand2, color: "bg-pink-500" },
  {
    type: "calculation",
    label: "Calculation",
    icon: Calculator,
    color: "bg-yellow-500",
  },
  {
    type: "decision",
    label: "Decision",
    icon: GitBranch,
    color: "bg-purple-500",
  },
];

export const PipelineToolbar = () => {
  const deleteNode = useStore((state) => state.deleteNode);
  const selectedNodes = useStore((state) => state.selectedNodes);
  const handleDelete = () => {
    if (selectedNodes.length === 0) {
      alert("Please select a node to delete.");
      return;
    }
    selectedNodes.forEach((nodeId) => deleteNode(nodeId)); 
  };

  return (
    <div className="p-4 bg-white border-b">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold text-gray-700">Tools</h2>
        <div className="flex gap-5">
        <button
          onClick={handleDelete}
          className="flex items-center gap-2 px-4 py-2 text-white bg-red-500 rounded-lg shadow-lg hover:bg-red-600 transition-colors"
          title="Delete selected nodes"
        >
          <Trash2 size={18} />
          <span className="text-sm font-medium">Delete</span>
        </button>
        <SaveButton />
        </div>
      </div>
      <div className="flex flex-wrap gap-3">
        {tools.map((tool) => (
          <DraggableNode
            key={tool.type}
            type={tool.type}
            label={tool.label}
            icon={tool.icon}
            color={tool.color}
          />
        ))}
      </div>
      <SavedComponents />
    </div>
  );
};
```

================================================================================

File: ./frontend/src/components/saved/SavedComponentNode.jsx
--------------------------------------------------------------------------------
```
import React from "react";
import { Handle, Position } from "reactflow";
import { useStore } from "../../lib/store";
import { cn } from '../../lib/utils';

const SavedComponentNode = ({ data, id, className }) => {
  const { component } = data;

  const toggleNodeSelection = useStore((state) => state.toggleNodeSelection);
  const selectedNodes = useStore((state) => state.selectedNodes);
  const isSelected = selectedNodes.includes(id);

  const handleClick = (e) => {
    e.stopPropagation();
    toggleNodeSelection(id);
  };

  
  const hasInput = component.nodes.some((node) => node.type === "customInput");
  const hasOutput = component.nodes.some(
    (node) => node.type === "customOutput"
  );

  return (
    <div
      className={cn(
        "p-4 bg-teal-100 rounded-md shadow-md",
        isSelected
          ? "ring-2 ring-blue-500 ring-offset-2"
          : "ring-1 ring-gray-200",
        className
      )}
      onClick={handleClick} 
    >
      <h3 className="font-semibold text-teal-800">{data.label}</h3>
      <p className="text-sm text-teal-700">{component.description}</p>

      {/* Input Handle */}
      {hasInput && (
        <Handle
          type="target"
          position={Position.Left}
          id="input"
          style={{ background: "#64748b", width: 12, height: 12 }}
        />
      )}

      {/* Output Handle */}
      {hasOutput && (
        <Handle
          type="source"
          position={Position.Right}
          id="output"
          style={{ background: "#64748b", width: 12, height: 12 }}
        />
      )}
    </div>
  );
};

export default SavedComponentNode;
```

================================================================================

File: ./frontend/src/components/saved/SaveComponentModal.jsx
--------------------------------------------------------------------------------
```
import React, { useState } from 'react';
import { useStore } from '../../lib/store';
import { shallow } from 'zustand/shallow';
import { AlertCircle } from 'lucide-react';

export const SaveComponentModal = ({ isOpen, onClose }) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const selectedNodes = useStore(
    (state) => state.nodes.filter(node => node.selected),
    shallow
  );
  const saveComponent = useStore((state) => state.saveComponent);

  const validateComponent = () => {
    const hasInput = selectedNodes.some(node => node.type === 'customInput');
    const hasOutput = selectedNodes.some(node => node.type === 'customOutput');
    const errors = [];

    if (!name.trim()) {
      errors.push('Please enter a name for the component');
    }

    if (!hasInput) {
      errors.push('Component must have at least one input node');
    }

    if (!hasOutput) {
      errors.push('Component must have at least one output node');
    }

    return errors;
  };

  const handleSave = () => {
    const errors = validateComponent();
    if (errors.length > 0) {
      alert(errors.join('\n'));
      return;
    }

    saveComponent(name, selectedNodes, description);
    setName('');
    setDescription('');
    onClose();
  };

  if (!isOpen) return null;

  const inputCount = selectedNodes.filter(node => node.type === 'customInput').length;
  const outputCount = selectedNodes.filter(node => node.type === 'customOutput').length;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-96">
        <h2 className="text-xl font-semibold mb-4">Save Component</h2>
        
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Component Name
          </label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter component name"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter component description"
            rows={3}
          />
        </div>

        <div className="mb-4 p-3 bg-gray-50 rounded-md">
          <h3 className="text-sm font-medium text-gray-700 mb-2">Component Summary</h3>
          <div className="space-y-1">
            <p className="text-sm text-gray-600">
              Total Nodes: {selectedNodes.length}
            </p>
            <p className="text-sm text-gray-600">
              Input Nodes: {inputCount}
            </p>
            <p className="text-sm text-gray-600">
              Output Nodes: {outputCount}
            </p>
          </div>
        </div>

        {(!inputCount || !outputCount) && (
          <div className="mb-4 p-3 bg-red-50 rounded-md flex items-start gap-2">
            <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />
            <div className="text-sm text-red-700">
              Component must have at least one input and one output node.
            </div>
          </div>
        )}

        <div className="flex justify-end gap-2">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};```

================================================================================

File: ./frontend/src/components/saved/SavedComponents.jsx
--------------------------------------------------------------------------------
```
import React from 'react';
import { useStore } from '../../lib/store';
import { DraggableNode } from '../draggable-node';
import { Package } from 'lucide-react';

export const SavedComponents = () => {
  const savedComponents = useStore((state) => state.savedComponents);

  if (!savedComponents || savedComponents.length === 0) {
    return null;
  }

  return (
    <div className="mt-4">
      <h2 className="mb-4 text-lg font-semibold text-gray-700">Saved Components</h2>
      <div className="flex flex-wrap gap-3">
        {savedComponents.map((component) => (
          <DraggableNode
            key={component.name}
            type="savedComponent"
            label={component.name}
            icon={Package}
            color="bg-teal-500"
            customData={{
                description: `Nodes: ${component.nodes.length}`,
                ...component,
            }}
          />
        ))}
      </div>
    </div>
  );
};```

================================================================================

File: ./frontend/src/components/nodes/decision-node.jsx
--------------------------------------------------------------------------------
```
import React from 'react';
import { BaseNode } from '../node-base';
import { Position } from 'reactflow';
import { GitBranch } from 'lucide-react';

export const DecisionNode = ({ id, data }) => {
  return (
    <BaseNode
      id={id}
      type="Decision"
      data={data}
      handles={[
        { id: 'input', type: 'target', position: Position.Left },
        { id: 'yesOutput', type: 'source', position: Position.Right },
        { id: 'noOutput', type: 'source', position: Position.Bottom },
      ]}
      className="bg-purple-50 border-purple-400"
    >
      <GitBranch className="w-8 h-8 text-purple-600" />
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/components/nodes/calculation-node.jsx
--------------------------------------------------------------------------------
```
import React from 'react';
import { BaseNode } from '../node-base';
import { Position } from 'reactflow';
import { Calculator } from 'lucide-react';

export const CalculationNode = ({ id, data }) => {
  return (
    <BaseNode
      id={id}
      type="Calculation"
      data={data}
      handles={[
        { id: 'input', type: 'target', position: Position.Left },
        { id: 'output', type: 'source', position: Position.Right },
      ]}
      className="bg-yellow-50 border-yellow-400"
    >
      <Calculator className="w-8 h-8 text-yellow-600" />
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/components/nodes/text-node.jsx
--------------------------------------------------------------------------------
```
import React, { useState, useEffect } from 'react';
import { Position } from 'reactflow';
import { BaseNode } from '../node-base';
import { extractVariables, isValidVariableName } from '../../lib/utils';

export const TextNode = ({ id, data }) => {
  const [text, setText] = useState(data?.text || '{{input}}');
  const [variables, setVariables] = useState([]);
  const [height, setHeight] = useState('auto');

  useEffect(() => {
    const vars = extractVariables(text)
      .filter(isValidVariableName)
      .filter((v, i, self) => self.indexOf(v) === i);
    setVariables(vars);
  }, [text]);

  const handles = [
    {
      id: 'output',
      type: 'source',
      position: Position.Right,
      label: 'Output',
    },
    ...variables.map((variable) => ({
      id: variable,
      type: 'target',
      position: Position.Left,
      label: variable,
    })),
  ];

  return (
    <BaseNode
      id={id}
      type="Text"
      data={data}
      handles={handles}
      className="bg-green-50"
    >
      <div className="space-y-2">
        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          className="w-full px-2 py-1 text-sm border rounded resize-none focus:outline-none focus:ring-1 focus:ring-green-400"
          style={{ height }}
          onInput={(e) => {
            const target = e.target;
            target.style.height = 'auto';
            target.style.height = `${target.scrollHeight}px`;
            setHeight(`${target.scrollHeight}px`);
          }}
          rows={1}
        />
        {variables.length > 0 && (
          <div className="flex flex-wrap gap-1">
            {variables.map((variable) => (
              <span
                key={variable}
                className="px-2 py-1 text-xs bg-green-100 rounded-full text-green-700"
              >
                {variable}
              </span>
            ))}
          </div>
        )}
      </div>
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/components/nodes/output-node.jsx
--------------------------------------------------------------------------------
```
import React, { useState } from 'react';
import { Position } from 'reactflow';
import { BaseNode } from '../node-base';

export const OutputNode = ({ id, data }) => {
  const [name, setName] = useState(data?.outputName || id.replace('customOutput-', 'output_'));
  const [type, setType] = useState(data?.outputType || 'Text');

  const handles = [
    {
      id: 'value',
      type: 'target',
      position: Position.Left,
      label: 'Input',
    },
  ];

  return (
    <BaseNode
      id={id}
      type="Output"
      data={data}
      handles={handles}
      className="bg-orange-50"
    >
      <div className="space-y-3">
        <div className="flex flex-col">
          <label className="text-xs text-gray-600">Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-orange-400"
          />
        </div>
        <div className="flex flex-col">
          <label className="text-xs text-gray-600">Type</label>
          <select
            value={type}
            onChange={(e) => setType(e.target.value)}
            className="px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-orange-400"
          >
            <option value="Text">Text</option>
            <option value="Image">Image</option>
          </select>
        </div>
      </div>
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/components/nodes/transform-node.jsx
--------------------------------------------------------------------------------
```
import React from 'react';
import { BaseNode } from '../node-base';
import { Position } from 'reactflow';
import { Wand2 } from 'lucide-react';

export const TransformNode = ({ id, data }) => {
  const handles = [
    {
      id: 'input',
      type: 'target',
      position: Position.Left,
      label: 'Input',
    },
    {
      id: 'output',
      type: 'source',
      position: Position.Right,
      label: 'Output',
    },
  ];

  return (
    <BaseNode
      id={id}
      type="Transform"
      data={data}
      handles={handles}
      className="bg-pink-50"
    >
      <div className="flex flex-col items-center space-y-2">
        <Wand2 className="w-8 h-8 text-pink-600" />
        <p className="text-sm text-gray-600">Transform Node</p>
      </div>
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/components/nodes/llm-node.jsx
--------------------------------------------------------------------------------
```
import React from 'react';
import { Position } from 'reactflow';
import { BaseNode } from '../node-base';
import { Brain } from 'lucide-react';

export const LLMNode = ({ id, data }) => {
  const handles = [
    {
      id: 'system',
      type: 'target',
      position: Position.Left,
      label: 'System',
      style: { top: '33%' },
    },
    {
      id: 'prompt',
      type: 'target',
      position: Position.Left,
      label: 'Prompt',
      style: { top: '66%' },
    },
    {
      id: 'response',
      type: 'source',
      position: Position.Right,
      label: 'Response',
    },
  ];

  return (
    <BaseNode
      id={id}
      type="LLM"
      data={data}
      handles={handles}
      className="bg-purple-50"
    >
      <div className="flex flex-col items-center space-y-2">
        <Brain className="w-8 h-8 text-purple-600" />
        <p className="text-sm text-gray-600">Language Model</p>
      </div>
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/components/nodes/input-node.jsx
--------------------------------------------------------------------------------
```
import React, { useState } from 'react';
import { Position } from 'reactflow';
import { BaseNode } from '../node-base';

export const InputNode = ({ id, data }) => {
  const [name, setName] = useState(data?.inputName || id.replace('customInput-', 'input_'));
  const [type, setType] = useState(data?.inputType || 'Text');

  const handles = [
    {
      id: 'value',
      type: 'source',
      position: Position.Right,
      label: 'Output',
    },
  ];

  return (
    <BaseNode
      id={id}
      type="Input"
      data={data}
      handles={handles}
      className="bg-blue-50"
    >
      <div className="space-y-3">
        <div className="flex flex-col">
          <label className="text-xs text-gray-600">Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-blue-400"
          />
        </div>
        <div className="flex flex-col">
          <label className="text-xs text-gray-600">Type</label>
          <select
            value={type}
            onChange={(e) => setType(e.target.value)}
            className="px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-blue-400"
          >
            <option value="Text">Text</option>
            <option value="File">File</option>
          </select>
        </div>
      </div>
    </BaseNode>
  );
};
```

================================================================================

File: ./frontend/src/lib/store.js
--------------------------------------------------------------------------------
```
import { createWithEqualityFn } from 'zustand/traditional';
import {
  addEdge,
  applyNodeChanges,
  applyEdgeChanges,
  MarkerType,
} from 'reactflow';
import { produce } from 'immer';

const initialState = {
  nodes: [],
  edges: [],
  nodeIDs: {},
  savedComponents: [],
  selectedNodes: [],
};

export const useStore = createWithEqualityFn((set, get) => ({
  ...initialState,

  getNodeID: (type) => {
    if (!type) {
      console.error("Node type is required to generate an ID.");
      return null;
    }

    set(produce((state) => {
      if (!state.nodeIDs[type]) {
        state.nodeIDs[type] = 0;
      }
      state.nodeIDs[type] += 1;
    }));

    return `${type}-${get().nodeIDs[type]}`;
  },

  addNode: (node) => {
    if (!node.id || !node.type || !node.data) {
      console.error("Invalid node: Missing required properties.", node);
      return;
    }
    set(produce((state) => {
      state.nodes.push(node);
    }));
  },

  onNodesChange: (changes) => {
    set(produce((state) => {
      state.nodes = applyNodeChanges(changes, state.nodes);
    }));
  },

  onEdgesChange: (changes) => {
    set(produce((state) => {
      state.edges = applyEdgeChanges(changes, state.edges);
    }));
  },

  onConnect: (connection) => {
    set(produce((state) => {
      const newEdge = {
        id: `edge-${state.edges.length + 1}`,
        ...connection,
        type: 'smoothstep',
        animated: true,
        markerEnd: { type: MarkerType.Arrow },
      };
      state.edges = addEdge(newEdge, state.edges);
    }));
  },

  toggleNodeSelection: (nodeId) => {
    set(produce((state) => {
      const index = state.selectedNodes.indexOf(nodeId);
      if (index === -1) {
        state.selectedNodes.push(nodeId);
        const node = state.nodes.find(n => n.id === nodeId);
        if (node) {
          node.selected = true;
        }
      } else {
        state.selectedNodes.splice(index, 1);
        const node = state.nodes.find(n => n.id === nodeId);
        if (node) {
          node.selected = false;
        }
      }
    }));
  },

  saveComponent: (name, nodes, description = '') => {
    if (!name.trim() || !nodes?.length) {
      console.error("Invalid save component parameters");
      return;
    }

    const hasInput = nodes.some(node => node.type === 'customInput');
    const hasOutput = nodes.some(node => node.type === 'customOutput');

    if (!hasInput || !hasOutput) {
      console.error("Component must have at least one input and one output node");
      return;
    }

    set(produce((state) => {
      state.savedComponents.push({
        name,
        description,
        nodes: nodes.map((node) => ({
          ...node,
          position: { x: 0, y: 0 },
          selected: false,
          data: { ...node.data },
        })),
      });
    }));
  },

  deleteSavedComponent: (name) => {
    set(produce((state) => {
      state.savedComponents = state.savedComponents.filter(
        (component) => component.name !== name
      );
    }));
  },

  deleteNode: (nodeId) => {
    set(produce((state) => {
      const node = state.nodes.find((n) => n.id === nodeId);
      
      state.nodes = state.nodes.filter((n) => n.id !== nodeId);
      state.edges = state.edges.filter(
        (edge) => edge.source !== nodeId && edge.target !== nodeId
      );
      state.selectedNodes = state.selectedNodes.filter((id) => id !== nodeId);

      if (node?.type === 'savedComponent') {
        console.log('Deleted saved component instance:', node.data.label);
      }
    }));
  },
}), Object.is);```

================================================================================

File: ./frontend/src/lib/theme.js
--------------------------------------------------------------------------------
```
export const theme = {
    colors: {
        primary: {
            DEFAULT: 'hsl(var(--primary))',
            hover: 'hsl(var(--primary-hover))',
            foreground: 'hsl(var(--primary-foreground))',
        },
        node: {
            input: {
                bg: 'bg-gradient-to-br from-blue-50 to-blue-100',
                border: 'border-blue-400',
                icon: 'text-blue-600',
            },
            llm: {
                bg: 'bg-gradient-to-br from-purple-50 to-purple-100',
                border: 'border-purple-400',
                icon: 'text-purple-600',
            },
            text: {
                bg: 'bg-gradient-to-br from-green-50 to-green-100',
                border: 'border-green-400',
                icon: 'text-green-600',
            },
            output: {
                bg: 'bg-gradient-to-br from-orange-50 to-orange-100',
                border: 'border-orange-400',
                icon: 'text-orange-600',
            },
            transform: {
                bg: 'bg-gradient-to-br from-pink-50 to-pink-100',
                border: 'border-pink-400',
                icon: 'text-pink-600',
            },
            calculation: {
                bg: 'bg-gradient-to-br from-yellow-50 to-yellow-100',
                border: 'border-yellow-400',
                icon: 'text-yellow-600',
            },
            decision: {
                bg: 'bg-gradient-to-br from-purple-50 to-purple-100',
                border: 'border-purple-400',
                icon: 'text-purple-600',
            },
        },
    },
    shadows: {
        node: 'shadow-lg hover:shadow-xl transition-shadow duration-200',
    },
}```

================================================================================

File: ./frontend/src/lib/utils.js
--------------------------------------------------------------------------------
```
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

export function extractVariables(text) {
  const regex = /{{(.*?)}}/g;
  const matches = text.match(regex) || [];
  return matches.map(match => match.slice(2, -2).trim());
}

export function isValidVariableName(name) {
  try {
    Function(`var ${name};`);
    return true;
  } catch {
    return false;
  }
}
```

================================================================================

